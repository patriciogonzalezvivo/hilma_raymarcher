# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _hilma
else:
    import _hilma

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _hilma.delete_SwigPyIterator

    def value(self):
        return _hilma.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _hilma.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _hilma.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _hilma.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _hilma.SwigPyIterator_equal(self, x)

    def copy(self):
        return _hilma.SwigPyIterator_copy(self)

    def next(self):
        return _hilma.SwigPyIterator_next(self)

    def __next__(self):
        return _hilma.SwigPyIterator___next__(self)

    def previous(self):
        return _hilma.SwigPyIterator_previous(self)

    def advance(self, n):
        return _hilma.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _hilma.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _hilma.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _hilma.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _hilma.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _hilma.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _hilma.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _hilma:
_hilma.SwigPyIterator_swigregister(SwigPyIterator)

class ivec2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_hilma.ivec2_x_get, _hilma.ivec2_x_set)
    y = property(_hilma.ivec2_y_get, _hilma.ivec2_y_set)

    def __init__(self, *args):
        _hilma.ivec2_swiginit(self, _hilma.new_ivec2(*args))

    def __getitem__(self, i):
        return _hilma.ivec2___getitem__(self, i)

    def __setitem__(self, i, f):
        return _hilma.ivec2___setitem__(self, i, f)

    def __tostring(self):
        return _hilma.ivec2___tostring(self)

    def __add__(self, *args):
        return _hilma.ivec2___add__(self, *args)

    def __sub__(self, *args):
        return _hilma.ivec2___sub__(self, *args)

    def __mul__(self, *args):
        return _hilma.ivec2___mul__(self, *args)

    def __truediv__(self, *args):
        return _hilma.ivec2___truediv__(self, *args)
    __div__ = __truediv__


    __swig_destroy__ = _hilma.delete_ivec2

# Register ivec2 in _hilma:
_hilma.ivec2_swigregister(ivec2)

class ivec3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_hilma.ivec3_x_get, _hilma.ivec3_x_set)
    y = property(_hilma.ivec3_y_get, _hilma.ivec3_y_set)
    z = property(_hilma.ivec3_z_get, _hilma.ivec3_z_set)

    def __init__(self, *args):
        _hilma.ivec3_swiginit(self, _hilma.new_ivec3(*args))

    def __getitem__(self, i):
        return _hilma.ivec3___getitem__(self, i)

    def __setitem__(self, i, f):
        return _hilma.ivec3___setitem__(self, i, f)

    def __tostring(self):
        return _hilma.ivec3___tostring(self)

    def __add__(self, *args):
        return _hilma.ivec3___add__(self, *args)

    def __sub__(self, *args):
        return _hilma.ivec3___sub__(self, *args)

    def __mul__(self, *args):
        return _hilma.ivec3___mul__(self, *args)

    def __truediv__(self, *args):
        return _hilma.ivec3___truediv__(self, *args)
    __div__ = __truediv__


    __swig_destroy__ = _hilma.delete_ivec3

# Register ivec3 in _hilma:
_hilma.ivec3_swigregister(ivec3)

class vec2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_hilma.vec2_x_get, _hilma.vec2_x_set)
    y = property(_hilma.vec2_y_get, _hilma.vec2_y_set)

    def __init__(self, *args):
        _hilma.vec2_swiginit(self, _hilma.new_vec2(*args))

    def __getitem__(self, i):
        return _hilma.vec2___getitem__(self, i)

    def __setitem__(self, i, f):
        return _hilma.vec2___setitem__(self, i, f)

    def __tostring(self):
        return _hilma.vec2___tostring(self)

    def __add__(self, *args):
        return _hilma.vec2___add__(self, *args)

    def __sub__(self, *args):
        return _hilma.vec2___sub__(self, *args)

    def __mul__(self, *args):
        return _hilma.vec2___mul__(self, *args)

    def __truediv__(self, *args):
        return _hilma.vec2___truediv__(self, *args)
    __div__ = __truediv__


    __swig_destroy__ = _hilma.delete_vec2

# Register vec2 in _hilma:
_hilma.vec2_swigregister(vec2)

class vec3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_hilma.vec3_x_get, _hilma.vec3_x_set)
    y = property(_hilma.vec3_y_get, _hilma.vec3_y_set)
    z = property(_hilma.vec3_z_get, _hilma.vec3_z_set)

    @staticmethod
    def length():
        return _hilma.vec3_length()

    def __init__(self, *args):
        _hilma.vec3_swiginit(self, _hilma.new_vec3(*args))

    def __getitem__(self, i):
        return _hilma.vec3___getitem__(self, i)

    def __setitem__(self, i, f):
        return _hilma.vec3___setitem__(self, i, f)

    def __tostring(self):
        return _hilma.vec3___tostring(self)

    def __add__(self, *args):
        return _hilma.vec3___add__(self, *args)

    def __sub__(self, *args):
        return _hilma.vec3___sub__(self, *args)

    def __mul__(self, *args):
        return _hilma.vec3___mul__(self, *args)

    def __truediv__(self, *args):
        return _hilma.vec3___truediv__(self, *args)
    __div__ = __truediv__


    __swig_destroy__ = _hilma.delete_vec3

# Register vec3 in _hilma:
_hilma.vec3_swigregister(vec3)

def vec3_length():
    return _hilma.vec3_length()

class vec4(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_hilma.vec4_x_get, _hilma.vec4_x_set)
    y = property(_hilma.vec4_y_get, _hilma.vec4_y_set)
    z = property(_hilma.vec4_z_get, _hilma.vec4_z_set)
    w = property(_hilma.vec4_w_get, _hilma.vec4_w_set)

    @staticmethod
    def length():
        return _hilma.vec4_length()

    def __init__(self, *args):
        _hilma.vec4_swiginit(self, _hilma.new_vec4(*args))

    def __getitem__(self, i):
        return _hilma.vec4___getitem__(self, i)

    def __setitem__(self, i, f):
        return _hilma.vec4___setitem__(self, i, f)

    def __tostring(self):
        return _hilma.vec4___tostring(self)

    def __add__(self, *args):
        return _hilma.vec4___add__(self, *args)

    def __sub__(self, *args):
        return _hilma.vec4___sub__(self, *args)

    def __mul__(self, *args):
        return _hilma.vec4___mul__(self, *args)

    def __truediv__(self, *args):
        return _hilma.vec4___truediv__(self, *args)
    __div__ = __truediv__


    __swig_destroy__ = _hilma.delete_vec4

# Register vec4 in _hilma:
_hilma.vec4_swigregister(vec4)

def vec4_length():
    return _hilma.vec4_length()

class mat3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def length():
        return _hilma.mat3_length()

    def __init__(self, *args):
        _hilma.mat3_swiginit(self, _hilma.new_mat3(*args))

    def __getitem__(self, i):
        return _hilma.mat3___getitem__(self, i)

    def __setitem__(self, i, v):
        return _hilma.mat3___setitem__(self, i, v)

    def __tostring(self):
        return _hilma.mat3___tostring(self)

    def __add__(self, *args):
        return _hilma.mat3___add__(self, *args)

    def __sub__(self, *args):
        return _hilma.mat3___sub__(self, *args)

    def __mul__(self, *args):
        return _hilma.mat3___mul__(self, *args)

    def __truediv__(self, *args):
        return _hilma.mat3___truediv__(self, *args)
    __div__ = __truediv__


    __swig_destroy__ = _hilma.delete_mat3

# Register mat3 in _hilma:
_hilma.mat3_swigregister(mat3)

def mat3_length():
    return _hilma.mat3_length()

class mat4(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def length():
        return _hilma.mat4_length()

    def __init__(self, *args):
        _hilma.mat4_swiginit(self, _hilma.new_mat4(*args))

    def __getitem__(self, i):
        return _hilma.mat4___getitem__(self, i)

    def __setitem__(self, i, v):
        return _hilma.mat4___setitem__(self, i, v)

    def __tostring(self):
        return _hilma.mat4___tostring(self)

    def __add__(self, *args):
        return _hilma.mat4___add__(self, *args)

    def __sub__(self, *args):
        return _hilma.mat4___sub__(self, *args)

    def __mul__(self, *args):
        return _hilma.mat4___mul__(self, *args)

    def __truediv__(self, *args):
        return _hilma.mat4___truediv__(self, *args)
    __div__ = __truediv__


    __swig_destroy__ = _hilma.delete_mat4

# Register mat4 in _hilma:
_hilma.mat4_swigregister(mat4)

def mat4_length():
    return _hilma.mat4_length()


def sub(*args):
    return _hilma.sub(*args)
class quat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_hilma.quat_x_get, _hilma.quat_x_set)
    y = property(_hilma.quat_y_get, _hilma.quat_y_set)
    z = property(_hilma.quat_z_get, _hilma.quat_z_set)
    w = property(_hilma.quat_w_get, _hilma.quat_w_set)

    @staticmethod
    def length():
        return _hilma.quat_length()

    def __init__(self, *args):
        _hilma.quat_swiginit(self, _hilma.new_quat(*args))

    def __getitem__(self, i):
        return _hilma.quat___getitem__(self, i)

    def __setitem__(self, i, f):
        return _hilma.quat___setitem__(self, i, f)

    def __tostring(self):
        return _hilma.quat___tostring(self)

    def __add__(self, q):
        return _hilma.quat___add__(self, q)

    def __mul__(self, *args):
        return _hilma.quat___mul__(self, *args)

    def __truediv__(self, *args):
        return _hilma.quat___truediv__(self, *args)
    __div__ = __truediv__


    __swig_destroy__ = _hilma.delete_quat

# Register quat in _hilma:
_hilma.quat_swigregister(quat)

def quat_length():
    return _hilma.quat_length()


def add(*args):
    return _hilma.add(*args)

def mul(*args):
    return _hilma.mul(*args)

def div(*args):
    return _hilma.div(*args)

def eq(*args):
    return _hilma.eq(*args)

def length(q):
    return _hilma.length(q)

def normalize(q):
    return _hilma.normalize(q)

def dot(x, y):
    return _hilma.dot(x, y)

def mix(x, y, a):
    return _hilma.mix(x, y, a)

def lerp(x, y, a):
    return _hilma.lerp(x, y, a)

def slerp(x, y, a):
    return _hilma.slerp(x, y, a)

def conjugate(q):
    return _hilma.conjugate(q)

def inverse(q):
    return _hilma.inverse(q)

def eulerAngles(x):
    return _hilma.eulerAngles(x)

def roll(x):
    return _hilma.roll(x)

def pitch(x):
    return _hilma.pitch(x)

def yaw(x):
    return _hilma.yaw(x)

def mat3_cast(x):
    return _hilma.mat3_cast(x)

def mat4_cast(x):
    return _hilma.mat4_cast(x)

def quat_cast(*args):
    return _hilma.quat_cast(*args)

def angle(x):
    return _hilma.angle(x)

def axis(x):
    return _hilma.axis(x)

def angleAxis(angle, axis):
    return _hilma.angleAxis(angle, axis)
class Vector4DVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _hilma.Vector4DVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hilma.Vector4DVector___nonzero__(self)

    def __bool__(self):
        return _hilma.Vector4DVector___bool__(self)

    def __len__(self):
        return _hilma.Vector4DVector___len__(self)

    def __getslice__(self, i, j):
        return _hilma.Vector4DVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hilma.Vector4DVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hilma.Vector4DVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hilma.Vector4DVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hilma.Vector4DVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hilma.Vector4DVector___setitem__(self, *args)

    def pop(self):
        return _hilma.Vector4DVector_pop(self)

    def append(self, x):
        return _hilma.Vector4DVector_append(self, x)

    def empty(self):
        return _hilma.Vector4DVector_empty(self)

    def size(self):
        return _hilma.Vector4DVector_size(self)

    def swap(self, v):
        return _hilma.Vector4DVector_swap(self, v)

    def begin(self):
        return _hilma.Vector4DVector_begin(self)

    def end(self):
        return _hilma.Vector4DVector_end(self)

    def rbegin(self):
        return _hilma.Vector4DVector_rbegin(self)

    def rend(self):
        return _hilma.Vector4DVector_rend(self)

    def clear(self):
        return _hilma.Vector4DVector_clear(self)

    def get_allocator(self):
        return _hilma.Vector4DVector_get_allocator(self)

    def pop_back(self):
        return _hilma.Vector4DVector_pop_back(self)

    def erase(self, *args):
        return _hilma.Vector4DVector_erase(self, *args)

    def __init__(self, *args):
        _hilma.Vector4DVector_swiginit(self, _hilma.new_Vector4DVector(*args))

    def push_back(self, x):
        return _hilma.Vector4DVector_push_back(self, x)

    def front(self):
        return _hilma.Vector4DVector_front(self)

    def back(self):
        return _hilma.Vector4DVector_back(self)

    def assign(self, n, x):
        return _hilma.Vector4DVector_assign(self, n, x)

    def resize(self, *args):
        return _hilma.Vector4DVector_resize(self, *args)

    def insert(self, *args):
        return _hilma.Vector4DVector_insert(self, *args)

    def reserve(self, n):
        return _hilma.Vector4DVector_reserve(self, n)

    def capacity(self):
        return _hilma.Vector4DVector_capacity(self)
    __swig_destroy__ = _hilma.delete_Vector4DVector

# Register Vector4DVector in _hilma:
_hilma.Vector4DVector_swigregister(Vector4DVector)

class Vector3DVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _hilma.Vector3DVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hilma.Vector3DVector___nonzero__(self)

    def __bool__(self):
        return _hilma.Vector3DVector___bool__(self)

    def __len__(self):
        return _hilma.Vector3DVector___len__(self)

    def __getslice__(self, i, j):
        return _hilma.Vector3DVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hilma.Vector3DVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hilma.Vector3DVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hilma.Vector3DVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hilma.Vector3DVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hilma.Vector3DVector___setitem__(self, *args)

    def pop(self):
        return _hilma.Vector3DVector_pop(self)

    def append(self, x):
        return _hilma.Vector3DVector_append(self, x)

    def empty(self):
        return _hilma.Vector3DVector_empty(self)

    def size(self):
        return _hilma.Vector3DVector_size(self)

    def swap(self, v):
        return _hilma.Vector3DVector_swap(self, v)

    def begin(self):
        return _hilma.Vector3DVector_begin(self)

    def end(self):
        return _hilma.Vector3DVector_end(self)

    def rbegin(self):
        return _hilma.Vector3DVector_rbegin(self)

    def rend(self):
        return _hilma.Vector3DVector_rend(self)

    def clear(self):
        return _hilma.Vector3DVector_clear(self)

    def get_allocator(self):
        return _hilma.Vector3DVector_get_allocator(self)

    def pop_back(self):
        return _hilma.Vector3DVector_pop_back(self)

    def erase(self, *args):
        return _hilma.Vector3DVector_erase(self, *args)

    def __init__(self, *args):
        _hilma.Vector3DVector_swiginit(self, _hilma.new_Vector3DVector(*args))

    def push_back(self, x):
        return _hilma.Vector3DVector_push_back(self, x)

    def front(self):
        return _hilma.Vector3DVector_front(self)

    def back(self):
        return _hilma.Vector3DVector_back(self)

    def assign(self, n, x):
        return _hilma.Vector3DVector_assign(self, n, x)

    def resize(self, *args):
        return _hilma.Vector3DVector_resize(self, *args)

    def insert(self, *args):
        return _hilma.Vector3DVector_insert(self, *args)

    def reserve(self, n):
        return _hilma.Vector3DVector_reserve(self, n)

    def capacity(self):
        return _hilma.Vector3DVector_capacity(self)
    __swig_destroy__ = _hilma.delete_Vector3DVector

# Register Vector3DVector in _hilma:
_hilma.Vector3DVector_swigregister(Vector3DVector)

class Vector2DVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _hilma.Vector2DVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hilma.Vector2DVector___nonzero__(self)

    def __bool__(self):
        return _hilma.Vector2DVector___bool__(self)

    def __len__(self):
        return _hilma.Vector2DVector___len__(self)

    def __getslice__(self, i, j):
        return _hilma.Vector2DVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hilma.Vector2DVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hilma.Vector2DVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hilma.Vector2DVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hilma.Vector2DVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hilma.Vector2DVector___setitem__(self, *args)

    def pop(self):
        return _hilma.Vector2DVector_pop(self)

    def append(self, x):
        return _hilma.Vector2DVector_append(self, x)

    def empty(self):
        return _hilma.Vector2DVector_empty(self)

    def size(self):
        return _hilma.Vector2DVector_size(self)

    def swap(self, v):
        return _hilma.Vector2DVector_swap(self, v)

    def begin(self):
        return _hilma.Vector2DVector_begin(self)

    def end(self):
        return _hilma.Vector2DVector_end(self)

    def rbegin(self):
        return _hilma.Vector2DVector_rbegin(self)

    def rend(self):
        return _hilma.Vector2DVector_rend(self)

    def clear(self):
        return _hilma.Vector2DVector_clear(self)

    def get_allocator(self):
        return _hilma.Vector2DVector_get_allocator(self)

    def pop_back(self):
        return _hilma.Vector2DVector_pop_back(self)

    def erase(self, *args):
        return _hilma.Vector2DVector_erase(self, *args)

    def __init__(self, *args):
        _hilma.Vector2DVector_swiginit(self, _hilma.new_Vector2DVector(*args))

    def push_back(self, x):
        return _hilma.Vector2DVector_push_back(self, x)

    def front(self):
        return _hilma.Vector2DVector_front(self)

    def back(self):
        return _hilma.Vector2DVector_back(self)

    def assign(self, n, x):
        return _hilma.Vector2DVector_assign(self, n, x)

    def resize(self, *args):
        return _hilma.Vector2DVector_resize(self, *args)

    def insert(self, *args):
        return _hilma.Vector2DVector_insert(self, *args)

    def reserve(self, n):
        return _hilma.Vector2DVector_reserve(self, n)

    def capacity(self):
        return _hilma.Vector2DVector_capacity(self)
    __swig_destroy__ = _hilma.delete_Vector2DVector

# Register Vector2DVector in _hilma:
_hilma.Vector2DVector_swigregister(Vector2DVector)

class PolylinesVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _hilma.PolylinesVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hilma.PolylinesVector___nonzero__(self)

    def __bool__(self):
        return _hilma.PolylinesVector___bool__(self)

    def __len__(self):
        return _hilma.PolylinesVector___len__(self)

    def __getslice__(self, i, j):
        return _hilma.PolylinesVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hilma.PolylinesVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hilma.PolylinesVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hilma.PolylinesVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hilma.PolylinesVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hilma.PolylinesVector___setitem__(self, *args)

    def pop(self):
        return _hilma.PolylinesVector_pop(self)

    def append(self, x):
        return _hilma.PolylinesVector_append(self, x)

    def empty(self):
        return _hilma.PolylinesVector_empty(self)

    def size(self):
        return _hilma.PolylinesVector_size(self)

    def swap(self, v):
        return _hilma.PolylinesVector_swap(self, v)

    def begin(self):
        return _hilma.PolylinesVector_begin(self)

    def end(self):
        return _hilma.PolylinesVector_end(self)

    def rbegin(self):
        return _hilma.PolylinesVector_rbegin(self)

    def rend(self):
        return _hilma.PolylinesVector_rend(self)

    def clear(self):
        return _hilma.PolylinesVector_clear(self)

    def get_allocator(self):
        return _hilma.PolylinesVector_get_allocator(self)

    def pop_back(self):
        return _hilma.PolylinesVector_pop_back(self)

    def erase(self, *args):
        return _hilma.PolylinesVector_erase(self, *args)

    def __init__(self, *args):
        _hilma.PolylinesVector_swiginit(self, _hilma.new_PolylinesVector(*args))

    def push_back(self, x):
        return _hilma.PolylinesVector_push_back(self, x)

    def front(self):
        return _hilma.PolylinesVector_front(self)

    def back(self):
        return _hilma.PolylinesVector_back(self)

    def assign(self, n, x):
        return _hilma.PolylinesVector_assign(self, n, x)

    def resize(self, *args):
        return _hilma.PolylinesVector_resize(self, *args)

    def insert(self, *args):
        return _hilma.PolylinesVector_insert(self, *args)

    def reserve(self, n):
        return _hilma.PolylinesVector_reserve(self, n)

    def capacity(self):
        return _hilma.PolylinesVector_capacity(self)
    __swig_destroy__ = _hilma.delete_PolylinesVector

# Register PolylinesVector in _hilma:
_hilma.PolylinesVector_swigregister(PolylinesVector)

class FacesVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _hilma.FacesVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hilma.FacesVector___nonzero__(self)

    def __bool__(self):
        return _hilma.FacesVector___bool__(self)

    def __len__(self):
        return _hilma.FacesVector___len__(self)

    def __getslice__(self, i, j):
        return _hilma.FacesVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hilma.FacesVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hilma.FacesVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hilma.FacesVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hilma.FacesVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hilma.FacesVector___setitem__(self, *args)

    def pop(self):
        return _hilma.FacesVector_pop(self)

    def append(self, x):
        return _hilma.FacesVector_append(self, x)

    def empty(self):
        return _hilma.FacesVector_empty(self)

    def size(self):
        return _hilma.FacesVector_size(self)

    def swap(self, v):
        return _hilma.FacesVector_swap(self, v)

    def begin(self):
        return _hilma.FacesVector_begin(self)

    def end(self):
        return _hilma.FacesVector_end(self)

    def rbegin(self):
        return _hilma.FacesVector_rbegin(self)

    def rend(self):
        return _hilma.FacesVector_rend(self)

    def clear(self):
        return _hilma.FacesVector_clear(self)

    def get_allocator(self):
        return _hilma.FacesVector_get_allocator(self)

    def pop_back(self):
        return _hilma.FacesVector_pop_back(self)

    def erase(self, *args):
        return _hilma.FacesVector_erase(self, *args)

    def __init__(self, *args):
        _hilma.FacesVector_swiginit(self, _hilma.new_FacesVector(*args))

    def push_back(self, x):
        return _hilma.FacesVector_push_back(self, x)

    def front(self):
        return _hilma.FacesVector_front(self)

    def back(self):
        return _hilma.FacesVector_back(self)

    def assign(self, n, x):
        return _hilma.FacesVector_assign(self, n, x)

    def resize(self, *args):
        return _hilma.FacesVector_resize(self, *args)

    def insert(self, *args):
        return _hilma.FacesVector_insert(self, *args)

    def reserve(self, n):
        return _hilma.FacesVector_reserve(self, n)

    def capacity(self):
        return _hilma.FacesVector_capacity(self)
    __swig_destroy__ = _hilma.delete_FacesVector

# Register FacesVector in _hilma:
_hilma.FacesVector_swigregister(FacesVector)

class EdgesVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _hilma.EdgesVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hilma.EdgesVector___nonzero__(self)

    def __bool__(self):
        return _hilma.EdgesVector___bool__(self)

    def __len__(self):
        return _hilma.EdgesVector___len__(self)

    def __getslice__(self, i, j):
        return _hilma.EdgesVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hilma.EdgesVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hilma.EdgesVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hilma.EdgesVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hilma.EdgesVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hilma.EdgesVector___setitem__(self, *args)

    def pop(self):
        return _hilma.EdgesVector_pop(self)

    def append(self, x):
        return _hilma.EdgesVector_append(self, x)

    def empty(self):
        return _hilma.EdgesVector_empty(self)

    def size(self):
        return _hilma.EdgesVector_size(self)

    def swap(self, v):
        return _hilma.EdgesVector_swap(self, v)

    def begin(self):
        return _hilma.EdgesVector_begin(self)

    def end(self):
        return _hilma.EdgesVector_end(self)

    def rbegin(self):
        return _hilma.EdgesVector_rbegin(self)

    def rend(self):
        return _hilma.EdgesVector_rend(self)

    def clear(self):
        return _hilma.EdgesVector_clear(self)

    def get_allocator(self):
        return _hilma.EdgesVector_get_allocator(self)

    def pop_back(self):
        return _hilma.EdgesVector_pop_back(self)

    def erase(self, *args):
        return _hilma.EdgesVector_erase(self, *args)

    def __init__(self, *args):
        _hilma.EdgesVector_swiginit(self, _hilma.new_EdgesVector(*args))

    def push_back(self, x):
        return _hilma.EdgesVector_push_back(self, x)

    def front(self):
        return _hilma.EdgesVector_front(self)

    def back(self):
        return _hilma.EdgesVector_back(self)

    def assign(self, n, x):
        return _hilma.EdgesVector_assign(self, n, x)

    def resize(self, *args):
        return _hilma.EdgesVector_resize(self, *args)

    def insert(self, *args):
        return _hilma.EdgesVector_insert(self, *args)

    def reserve(self, n):
        return _hilma.EdgesVector_reserve(self, n)

    def capacity(self):
        return _hilma.EdgesVector_capacity(self)
    __swig_destroy__ = _hilma.delete_EdgesVector

# Register EdgesVector in _hilma:
_hilma.EdgesVector_swigregister(EdgesVector)

class TrianglesVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _hilma.TrianglesVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hilma.TrianglesVector___nonzero__(self)

    def __bool__(self):
        return _hilma.TrianglesVector___bool__(self)

    def __len__(self):
        return _hilma.TrianglesVector___len__(self)

    def __getslice__(self, i, j):
        return _hilma.TrianglesVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hilma.TrianglesVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hilma.TrianglesVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hilma.TrianglesVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hilma.TrianglesVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hilma.TrianglesVector___setitem__(self, *args)

    def pop(self):
        return _hilma.TrianglesVector_pop(self)

    def append(self, x):
        return _hilma.TrianglesVector_append(self, x)

    def empty(self):
        return _hilma.TrianglesVector_empty(self)

    def size(self):
        return _hilma.TrianglesVector_size(self)

    def swap(self, v):
        return _hilma.TrianglesVector_swap(self, v)

    def begin(self):
        return _hilma.TrianglesVector_begin(self)

    def end(self):
        return _hilma.TrianglesVector_end(self)

    def rbegin(self):
        return _hilma.TrianglesVector_rbegin(self)

    def rend(self):
        return _hilma.TrianglesVector_rend(self)

    def clear(self):
        return _hilma.TrianglesVector_clear(self)

    def get_allocator(self):
        return _hilma.TrianglesVector_get_allocator(self)

    def pop_back(self):
        return _hilma.TrianglesVector_pop_back(self)

    def erase(self, *args):
        return _hilma.TrianglesVector_erase(self, *args)

    def __init__(self, *args):
        _hilma.TrianglesVector_swiginit(self, _hilma.new_TrianglesVector(*args))

    def push_back(self, x):
        return _hilma.TrianglesVector_push_back(self, x)

    def front(self):
        return _hilma.TrianglesVector_front(self)

    def back(self):
        return _hilma.TrianglesVector_back(self)

    def assign(self, n, x):
        return _hilma.TrianglesVector_assign(self, n, x)

    def resize(self, *args):
        return _hilma.TrianglesVector_resize(self, *args)

    def insert(self, *args):
        return _hilma.TrianglesVector_insert(self, *args)

    def reserve(self, n):
        return _hilma.TrianglesVector_reserve(self, n)

    def capacity(self):
        return _hilma.TrianglesVector_capacity(self)
    __swig_destroy__ = _hilma.delete_TrianglesVector

# Register TrianglesVector in _hilma:
_hilma.TrianglesVector_swigregister(TrianglesVector)

class LinesVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _hilma.LinesVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hilma.LinesVector___nonzero__(self)

    def __bool__(self):
        return _hilma.LinesVector___bool__(self)

    def __len__(self):
        return _hilma.LinesVector___len__(self)

    def __getslice__(self, i, j):
        return _hilma.LinesVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hilma.LinesVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hilma.LinesVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hilma.LinesVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hilma.LinesVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hilma.LinesVector___setitem__(self, *args)

    def pop(self):
        return _hilma.LinesVector_pop(self)

    def append(self, x):
        return _hilma.LinesVector_append(self, x)

    def empty(self):
        return _hilma.LinesVector_empty(self)

    def size(self):
        return _hilma.LinesVector_size(self)

    def swap(self, v):
        return _hilma.LinesVector_swap(self, v)

    def begin(self):
        return _hilma.LinesVector_begin(self)

    def end(self):
        return _hilma.LinesVector_end(self)

    def rbegin(self):
        return _hilma.LinesVector_rbegin(self)

    def rend(self):
        return _hilma.LinesVector_rend(self)

    def clear(self):
        return _hilma.LinesVector_clear(self)

    def get_allocator(self):
        return _hilma.LinesVector_get_allocator(self)

    def pop_back(self):
        return _hilma.LinesVector_pop_back(self)

    def erase(self, *args):
        return _hilma.LinesVector_erase(self, *args)

    def __init__(self, *args):
        _hilma.LinesVector_swiginit(self, _hilma.new_LinesVector(*args))

    def push_back(self, x):
        return _hilma.LinesVector_push_back(self, x)

    def front(self):
        return _hilma.LinesVector_front(self)

    def back(self):
        return _hilma.LinesVector_back(self)

    def assign(self, n, x):
        return _hilma.LinesVector_assign(self, n, x)

    def resize(self, *args):
        return _hilma.LinesVector_resize(self, *args)

    def insert(self, *args):
        return _hilma.LinesVector_insert(self, *args)

    def reserve(self, n):
        return _hilma.LinesVector_reserve(self, n)

    def capacity(self):
        return _hilma.LinesVector_capacity(self)
    __swig_destroy__ = _hilma.delete_LinesVector

# Register LinesVector in _hilma:
_hilma.LinesVector_swigregister(LinesVector)

class MeshesVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _hilma.MeshesVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hilma.MeshesVector___nonzero__(self)

    def __bool__(self):
        return _hilma.MeshesVector___bool__(self)

    def __len__(self):
        return _hilma.MeshesVector___len__(self)

    def __getslice__(self, i, j):
        return _hilma.MeshesVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hilma.MeshesVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hilma.MeshesVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hilma.MeshesVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hilma.MeshesVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hilma.MeshesVector___setitem__(self, *args)

    def pop(self):
        return _hilma.MeshesVector_pop(self)

    def append(self, x):
        return _hilma.MeshesVector_append(self, x)

    def empty(self):
        return _hilma.MeshesVector_empty(self)

    def size(self):
        return _hilma.MeshesVector_size(self)

    def swap(self, v):
        return _hilma.MeshesVector_swap(self, v)

    def begin(self):
        return _hilma.MeshesVector_begin(self)

    def end(self):
        return _hilma.MeshesVector_end(self)

    def rbegin(self):
        return _hilma.MeshesVector_rbegin(self)

    def rend(self):
        return _hilma.MeshesVector_rend(self)

    def clear(self):
        return _hilma.MeshesVector_clear(self)

    def get_allocator(self):
        return _hilma.MeshesVector_get_allocator(self)

    def pop_back(self):
        return _hilma.MeshesVector_pop_back(self)

    def erase(self, *args):
        return _hilma.MeshesVector_erase(self, *args)

    def __init__(self, *args):
        _hilma.MeshesVector_swiginit(self, _hilma.new_MeshesVector(*args))

    def push_back(self, x):
        return _hilma.MeshesVector_push_back(self, x)

    def front(self):
        return _hilma.MeshesVector_front(self)

    def back(self):
        return _hilma.MeshesVector_back(self)

    def assign(self, n, x):
        return _hilma.MeshesVector_assign(self, n, x)

    def resize(self, *args):
        return _hilma.MeshesVector_resize(self, *args)

    def insert(self, *args):
        return _hilma.MeshesVector_insert(self, *args)

    def reserve(self, n):
        return _hilma.MeshesVector_reserve(self, n)

    def capacity(self):
        return _hilma.MeshesVector_capacity(self)
    __swig_destroy__ = _hilma.delete_MeshesVector

# Register MeshesVector in _hilma:
_hilma.MeshesVector_swigregister(MeshesVector)

class ImagesVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _hilma.ImagesVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hilma.ImagesVector___nonzero__(self)

    def __bool__(self):
        return _hilma.ImagesVector___bool__(self)

    def __len__(self):
        return _hilma.ImagesVector___len__(self)

    def __getslice__(self, i, j):
        return _hilma.ImagesVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hilma.ImagesVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hilma.ImagesVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hilma.ImagesVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hilma.ImagesVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hilma.ImagesVector___setitem__(self, *args)

    def pop(self):
        return _hilma.ImagesVector_pop(self)

    def append(self, x):
        return _hilma.ImagesVector_append(self, x)

    def empty(self):
        return _hilma.ImagesVector_empty(self)

    def size(self):
        return _hilma.ImagesVector_size(self)

    def swap(self, v):
        return _hilma.ImagesVector_swap(self, v)

    def begin(self):
        return _hilma.ImagesVector_begin(self)

    def end(self):
        return _hilma.ImagesVector_end(self)

    def rbegin(self):
        return _hilma.ImagesVector_rbegin(self)

    def rend(self):
        return _hilma.ImagesVector_rend(self)

    def clear(self):
        return _hilma.ImagesVector_clear(self)

    def get_allocator(self):
        return _hilma.ImagesVector_get_allocator(self)

    def pop_back(self):
        return _hilma.ImagesVector_pop_back(self)

    def erase(self, *args):
        return _hilma.ImagesVector_erase(self, *args)

    def __init__(self, *args):
        _hilma.ImagesVector_swiginit(self, _hilma.new_ImagesVector(*args))

    def push_back(self, x):
        return _hilma.ImagesVector_push_back(self, x)

    def front(self):
        return _hilma.ImagesVector_front(self)

    def back(self):
        return _hilma.ImagesVector_back(self)

    def assign(self, n, x):
        return _hilma.ImagesVector_assign(self, n, x)

    def resize(self, *args):
        return _hilma.ImagesVector_resize(self, *args)

    def insert(self, *args):
        return _hilma.ImagesVector_insert(self, *args)

    def reserve(self, n):
        return _hilma.ImagesVector_reserve(self, n)

    def capacity(self):
        return _hilma.ImagesVector_capacity(self)
    __swig_destroy__ = _hilma.delete_ImagesVector

# Register ImagesVector in _hilma:
_hilma.ImagesVector_swigregister(ImagesVector)

class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _hilma.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hilma.StringVector___nonzero__(self)

    def __bool__(self):
        return _hilma.StringVector___bool__(self)

    def __len__(self):
        return _hilma.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _hilma.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hilma.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hilma.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hilma.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hilma.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hilma.StringVector___setitem__(self, *args)

    def pop(self):
        return _hilma.StringVector_pop(self)

    def append(self, x):
        return _hilma.StringVector_append(self, x)

    def empty(self):
        return _hilma.StringVector_empty(self)

    def size(self):
        return _hilma.StringVector_size(self)

    def swap(self, v):
        return _hilma.StringVector_swap(self, v)

    def begin(self):
        return _hilma.StringVector_begin(self)

    def end(self):
        return _hilma.StringVector_end(self)

    def rbegin(self):
        return _hilma.StringVector_rbegin(self)

    def rend(self):
        return _hilma.StringVector_rend(self)

    def clear(self):
        return _hilma.StringVector_clear(self)

    def get_allocator(self):
        return _hilma.StringVector_get_allocator(self)

    def pop_back(self):
        return _hilma.StringVector_pop_back(self)

    def erase(self, *args):
        return _hilma.StringVector_erase(self, *args)

    def __init__(self, *args):
        _hilma.StringVector_swiginit(self, _hilma.new_StringVector(*args))

    def push_back(self, x):
        return _hilma.StringVector_push_back(self, x)

    def front(self):
        return _hilma.StringVector_front(self)

    def back(self):
        return _hilma.StringVector_back(self)

    def assign(self, n, x):
        return _hilma.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _hilma.StringVector_resize(self, *args)

    def insert(self, *args):
        return _hilma.StringVector_insert(self, *args)

    def reserve(self, n):
        return _hilma.StringVector_reserve(self, n)

    def capacity(self):
        return _hilma.StringVector_capacity(self)
    __swig_destroy__ = _hilma.delete_StringVector

# Register StringVector in _hilma:
_hilma.StringVector_swigregister(StringVector)

class FloatVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _hilma.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hilma.FloatVector___nonzero__(self)

    def __bool__(self):
        return _hilma.FloatVector___bool__(self)

    def __len__(self):
        return _hilma.FloatVector___len__(self)

    def __getslice__(self, i, j):
        return _hilma.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hilma.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hilma.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hilma.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hilma.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hilma.FloatVector___setitem__(self, *args)

    def pop(self):
        return _hilma.FloatVector_pop(self)

    def append(self, x):
        return _hilma.FloatVector_append(self, x)

    def empty(self):
        return _hilma.FloatVector_empty(self)

    def size(self):
        return _hilma.FloatVector_size(self)

    def swap(self, v):
        return _hilma.FloatVector_swap(self, v)

    def begin(self):
        return _hilma.FloatVector_begin(self)

    def end(self):
        return _hilma.FloatVector_end(self)

    def rbegin(self):
        return _hilma.FloatVector_rbegin(self)

    def rend(self):
        return _hilma.FloatVector_rend(self)

    def clear(self):
        return _hilma.FloatVector_clear(self)

    def get_allocator(self):
        return _hilma.FloatVector_get_allocator(self)

    def pop_back(self):
        return _hilma.FloatVector_pop_back(self)

    def erase(self, *args):
        return _hilma.FloatVector_erase(self, *args)

    def __init__(self, *args):
        _hilma.FloatVector_swiginit(self, _hilma.new_FloatVector(*args))

    def push_back(self, x):
        return _hilma.FloatVector_push_back(self, x)

    def front(self):
        return _hilma.FloatVector_front(self)

    def back(self):
        return _hilma.FloatVector_back(self)

    def assign(self, n, x):
        return _hilma.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _hilma.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _hilma.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _hilma.FloatVector_reserve(self, n)

    def capacity(self):
        return _hilma.FloatVector_capacity(self)
    __swig_destroy__ = _hilma.delete_FloatVector

# Register FloatVector in _hilma:
_hilma.FloatVector_swigregister(FloatVector)

class Ray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _hilma.Ray_swiginit(self, _hilma.new_Ray(*args))

    def set(self, _org, _dir):
        return _hilma.Ray_set(self, _org, _dir)

    def getOrigin(self):
        return _hilma.Ray_getOrigin(self)

    def getDirection(self):
        return _hilma.Ray_getDirection(self)

    def getInvertDirection(self):
        return _hilma.Ray_getInvertDirection(self)

    def getAt(self, _t):
        return _hilma.Ray_getAt(self, _t)
    __swig_destroy__ = _hilma.delete_Ray

# Register Ray in _hilma:
_hilma.Ray_swigregister(Ray)

class Line(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _hilma.Line_swiginit(self, _hilma.new_Line(*args))

    def set(self, _p0, _p1):
        return _hilma.Line_set(self, _p0, _p1)

    def getMagintude(self):
        return _hilma.Line_getMagintude(self)

    def getMagintude2(self):
        return _hilma.Line_getMagintude2(self)

    def getCentroid(self):
        return _hilma.Line_getCentroid(self)

    def getDireciton(self):
        return _hilma.Line_getDireciton(self)

    def getAt(self, _t):
        return _hilma.Line_getAt(self, _t)

    def getPoint(self, _index):
        return _hilma.Line_getPoint(self, _index)

    def haveColors(self):
        return _hilma.Line_haveColors(self)

    def setColor(self, *args):
        return _hilma.Line_setColor(self, *args)

    def getColor(self, _index):
        return _hilma.Line_getColor(self, _index)

    def getColorAt(self, _t):
        return _hilma.Line_getColorAt(self, _t)

    @staticmethod
    def compare(a, b, axis):
        return _hilma.Line_compare(a, b, axis)

    @staticmethod
    def compareX(a, b):
        return _hilma.Line_compareX(a, b)

    @staticmethod
    def compareY(a, b):
        return _hilma.Line_compareY(a, b)

    @staticmethod
    def compareZ(a, b):
        return _hilma.Line_compareZ(a, b)
    __swig_destroy__ = _hilma.delete_Line

# Register Line in _hilma:
_hilma.Line_swigregister(Line)

def Line_compare(a, b, axis):
    return _hilma.Line_compare(a, b, axis)

def Line_compareX(a, b):
    return _hilma.Line_compareX(a, b)

def Line_compareY(a, b):
    return _hilma.Line_compareY(a, b)

def Line_compareZ(a, b):
    return _hilma.Line_compareZ(a, b)

class Image(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _hilma.Image_swiginit(self, _hilma.new_Image(*args))
    __swig_destroy__ = _hilma.delete_Image

    def allocate(self, _width, _height, _channels):
        return _hilma.Image_allocate(self, _width, _height, _channels)

    def isAllocated(self):
        return _hilma.Image_isAllocated(self)

    def getWidth(self):
        return _hilma.Image_getWidth(self)

    def getHeight(self):
        return _hilma.Image_getHeight(self)

    def getChannels(self):
        return _hilma.Image_getChannels(self)

    def at(self, _index):
        return _hilma.Image_at(self, _index)

    def size(self):
        return _hilma.Image_size(self)

    def getIndex(self, _x, _y):
        return _hilma.Image_getIndex(self, _x, _y)

    def getIndexUV(self, _u, _v):
        return _hilma.Image_getIndexUV(self, _u, _v)

    def set(self, _array3D):
        return _hilma.Image_set(self, _array3D)

    def setValue(self, *args):
        return _hilma.Image_setValue(self, *args)

    def setColor(self, *args):
        return _hilma.Image_setColor(self, *args)

    def setColors(self, _array2D):
        return _hilma.Image_setColors(self, _array2D)

    def get(self):
        return _hilma.Image_get(self)

    def getValue(self, _index):
        return _hilma.Image_getValue(self, _index)

    def getColor(self, _index):
        return _hilma.Image_getColor(self, _index)

    def __add__(self, _value):
        return _hilma.Image___add__(self, _value)

    def __sub__(self, _value):
        return _hilma.Image___sub__(self, _value)

    def __mul__(self, _value):
        return _hilma.Image___mul__(self, _value)

    def __truediv__(self, *args):
        return _hilma.Image___truediv__(self, *args)
    __div__ = __truediv__



    def __iadd__(self, _value):
        return _hilma.Image___iadd__(self, _value)

    def __isub__(self, _value):
        return _hilma.Image___isub__(self, _value)

    def __imul__(self, _value):
        return _hilma.Image___imul__(self, _value)

    def __itruediv__(self, *args):
        return _hilma.Image___itruediv__(self, *args)
    __idiv__ = __itruediv__


    name = property(_hilma.Image_name_get, _hilma.Image_name_set)

# Register Image in _hilma:
_hilma.Image_swigregister(Image)

VALUE = _hilma.VALUE
COLOR = _hilma.COLOR
TEXTURE = _hilma.TEXTURE
class Material(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _name):
        _hilma.Material_swiginit(self, _hilma.new_Material(_name))

    def set(self, *args):
        return _hilma.Material_set(self, *args)

    def getName(self):
        return _hilma.Material_getName(self)

    def haveProperty(self, _property):
        return _hilma.Material_haveProperty(self, _property)

    def getImagePath(self, _property):
        return _hilma.Material_getImagePath(self, _property)

    def getImage(self, _property):
        return _hilma.Material_getImage(self, _property)

    def getColor(self, *args):
        return _hilma.Material_getColor(self, *args)

    def getValue(self, *args):
        return _hilma.Material_getValue(self, *args)
    illuminationModel = property(_hilma.Material_illuminationModel_get, _hilma.Material_illuminationModel_set)
    name = property(_hilma.Material_name_get, _hilma.Material_name_set)
    properties = property(_hilma.Material_properties_get, _hilma.Material_properties_set)
    values = property(_hilma.Material_values_get, _hilma.Material_values_set)
    colors = property(_hilma.Material_colors_get, _hilma.Material_colors_set)
    textures = property(_hilma.Material_textures_get, _hilma.Material_textures_set)
    texturesPaths = property(_hilma.Material_texturesPaths_get, _hilma.Material_texturesPaths_set)
    __swig_destroy__ = _hilma.delete_Material

# Register Material in _hilma:
_hilma.Material_swigregister(Material)

class Triangle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _hilma.Triangle_swiginit(self, _hilma.new_Triangle(*args))
    __swig_destroy__ = _hilma.delete_Triangle

    def set(self, _p0, _p1, _p2):
        return _hilma.Triangle_set(self, _p0, _p1, _p2)

    def setColors(self, _p0, _p1, _p2):
        return _hilma.Triangle_setColors(self, _p0, _p1, _p2)

    def setNormals(self, _p0, _p1, _p2):
        return _hilma.Triangle_setNormals(self, _p0, _p1, _p2)

    def setTexCoords(self, _p0, _p1, _p2):
        return _hilma.Triangle_setTexCoords(self, _p0, _p1, _p2)

    def setTangents(self, _p0, _p1, _p2):
        return _hilma.Triangle_setTangents(self, _p0, _p1, _p2)

    def containsPoint(self, _p):
        return _hilma.Triangle_containsPoint(self, _p)

    def setVertex(self, _index, _vertex):
        return _hilma.Triangle_setVertex(self, _index, _vertex)

    def getVertex(self, *args):
        return _hilma.Triangle_getVertex(self, *args)

    def getCentroid(self):
        return _hilma.Triangle_getCentroid(self)

    def getBarycentricOf(self, _p):
        return _hilma.Triangle_getBarycentricOf(self, _p)

    def haveColors(self):
        return _hilma.Triangle_haveColors(self)

    def setColor(self, *args):
        return _hilma.Triangle_setColor(self, *args)

    def getColor(self, *args):
        return _hilma.Triangle_getColor(self, *args)

    def haveNormals(self):
        return _hilma.Triangle_haveNormals(self)

    def setNormal(self, _index, _normal):
        return _hilma.Triangle_setNormal(self, _index, _normal)

    def getNormal(self, *args):
        return _hilma.Triangle_getNormal(self, *args)

    def haveTexCoords(self):
        return _hilma.Triangle_haveTexCoords(self)

    def setTexCoord(self, _index, _texcoord):
        return _hilma.Triangle_setTexCoord(self, _index, _texcoord)

    def getTexCoord(self, *args):
        return _hilma.Triangle_getTexCoord(self, *args)

    def haveTangents(self):
        return _hilma.Triangle_haveTangents(self)

    def setTangent(self, _index, _tangent):
        return _hilma.Triangle_setTangent(self, _index, _tangent)

    def getTangent(self, *args):
        return _hilma.Triangle_getTangent(self, *args)
    material = property(_hilma.Triangle_material_get, _hilma.Triangle_material_set)

    @staticmethod
    def compare(a, b, axis):
        return _hilma.Triangle_compare(a, b, axis)

    @staticmethod
    def compareX(a, b):
        return _hilma.Triangle_compareX(a, b)

    @staticmethod
    def compareY(a, b):
        return _hilma.Triangle_compareY(a, b)

    @staticmethod
    def compareZ(a, b):
        return _hilma.Triangle_compareZ(a, b)

# Register Triangle in _hilma:
_hilma.Triangle_swigregister(Triangle)

def Triangle_compare(a, b, axis):
    return _hilma.Triangle_compare(a, b, axis)

def Triangle_compareX(a, b):
    return _hilma.Triangle_compareX(a, b)

def Triangle_compareY(a, b):
    return _hilma.Triangle_compareY(a, b)

def Triangle_compareZ(a, b):
    return _hilma.Triangle_compareZ(a, b)

class Plane(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _hilma.Plane_swiginit(self, _hilma.new_Plane(*args))

    def set(self, *args):
        return _hilma.Plane_set(self, *args)

    def setNormal(self, _normal):
        return _hilma.Plane_setNormal(self, _normal)

    def getNormal(self):
        return _hilma.Plane_getNormal(self)

    def setOrigin(self, _pos):
        return _hilma.Plane_setOrigin(self, _pos)

    def getOrigin(self):
        return _hilma.Plane_getOrigin(self)

    def getDCoeff(self):
        return _hilma.Plane_getDCoeff(self)
    __swig_destroy__ = _hilma.delete_Plane

# Register Plane in _hilma:
_hilma.Plane_swigregister(Plane)

POINTS = _hilma.POINTS
TRIANGLE_STRIP = _hilma.TRIANGLE_STRIP
TRIANGLE_FAN = _hilma.TRIANGLE_FAN
TRIANGLES = _hilma.TRIANGLES
QUAD = _hilma.QUAD
UNDEFINED_EDGE = _hilma.UNDEFINED_EDGE
LINES = _hilma.LINES
LINE_STRIP = _hilma.LINE_STRIP
class Mesh(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _hilma.Mesh_swiginit(self, _hilma.new_Mesh(*args))
    __swig_destroy__ = _hilma.delete_Mesh

    def clear(self):
        return _hilma.Mesh_clear(self)

    def append(self, _mesh):
        return _hilma.Mesh_append(self, _mesh)

    def setFaceType(self, *args):
        return _hilma.Mesh_setFaceType(self, *args)

    def getFaceType(self):
        return _hilma.Mesh_getFaceType(self)

    def setEdgeType(self, *args):
        return _hilma.Mesh_setEdgeType(self, *args)

    def getEdgeType(self):
        return _hilma.Mesh_getEdgeType(self)

    def setName(self, _name):
        return _hilma.Mesh_setName(self, _name)

    def getName(self):
        return _hilma.Mesh_getName(self)

    def addVertex(self, *args):
        return _hilma.Mesh_addVertex(self, *args)

    def addVertices(self, _array2D):
        return _hilma.Mesh_addVertices(self, _array2D)

    def haveVertices(self):
        return _hilma.Mesh_haveVertices(self)

    def clearVertices(self):
        return _hilma.Mesh_clearVertices(self)

    def getVerticesTotal(self):
        return _hilma.Mesh_getVerticesTotal(self)

    def getVertex(self, _index):
        return _hilma.Mesh_getVertex(self, _index)

    def getVertices(self):
        return _hilma.Mesh_getVertices(self)

    def setColor(self, *args):
        return _hilma.Mesh_setColor(self, *args)

    def clearColors(self):
        return _hilma.Mesh_clearColors(self)

    def addColor(self, *args):
        return _hilma.Mesh_addColor(self, *args)

    def addColors(self, _array2D):
        return _hilma.Mesh_addColors(self, _array2D)

    def haveColors(self):
        return _hilma.Mesh_haveColors(self)

    def getColorsTotal(self):
        return _hilma.Mesh_getColorsTotal(self)

    def getColor(self, _index):
        return _hilma.Mesh_getColor(self, _index)

    def getColors(self):
        return _hilma.Mesh_getColors(self)

    def addNormal(self, *args):
        return _hilma.Mesh_addNormal(self, *args)

    def addNormals(self, _array2D):
        return _hilma.Mesh_addNormals(self, _array2D)

    def haveNormals(self):
        return _hilma.Mesh_haveNormals(self)

    def getNormal(self, _index):
        return _hilma.Mesh_getNormal(self, _index)

    def getNormalsTotal(self):
        return _hilma.Mesh_getNormalsTotal(self)

    def getNormals(self):
        return _hilma.Mesh_getNormals(self)

    def clearNormals(self):
        return _hilma.Mesh_clearNormals(self)

    def computeNormals(self):
        return _hilma.Mesh_computeNormals(self)

    def smoothNormals(self, _angle):
        return _hilma.Mesh_smoothNormals(self, _angle)

    def invertNormals(self):
        return _hilma.Mesh_invertNormals(self)

    def flatNormals(self):
        return _hilma.Mesh_flatNormals(self)

    def addTexCoord(self, *args):
        return _hilma.Mesh_addTexCoord(self, *args)

    def addTexCoords(self, _array2D):
        return _hilma.Mesh_addTexCoords(self, _array2D)

    def haveTexCoords(self):
        return _hilma.Mesh_haveTexCoords(self)

    def getTexCoordsTotal(self):
        return _hilma.Mesh_getTexCoordsTotal(self)

    def getTexCoord(self, _index):
        return _hilma.Mesh_getTexCoord(self, _index)

    def getTexCoords(self):
        return _hilma.Mesh_getTexCoords(self)

    def clearTexCoords(self):
        return _hilma.Mesh_clearTexCoords(self)

    def addTangent(self, _tangent):
        return _hilma.Mesh_addTangent(self, _tangent)

    def haveTangents(self):
        return _hilma.Mesh_haveTangents(self)

    def getTangent(self, _index):
        return _hilma.Mesh_getTangent(self, _index)

    def getTangents(self):
        return _hilma.Mesh_getTangents(self)

    def getTangetsTotal(self):
        return _hilma.Mesh_getTangetsTotal(self)

    def computeTangents(self):
        return _hilma.Mesh_computeTangents(self)

    def clearTangets(self):
        return _hilma.Mesh_clearTangets(self)

    def addIndices(self, _array2D):
        return _hilma.Mesh_addIndices(self, _array2D)

    def mergeDuplicateVertices(self):
        return _hilma.Mesh_mergeDuplicateVertices(self)

    def addTriangle(self, _tri):
        return _hilma.Mesh_addTriangle(self, _tri)

    def addTriangleIndices(self, _i1, _i2, _i3):
        return _hilma.Mesh_addTriangleIndices(self, _i1, _i2, _i3)

    def addQuadIndices(self, _i1, _i2, _i3, _i4):
        return _hilma.Mesh_addQuadIndices(self, _i1, _i2, _i3, _i4)

    def addFaceIndex(self, _i):
        return _hilma.Mesh_addFaceIndex(self, _i)

    def addFaceIndices(self, _array1D):
        return _hilma.Mesh_addFaceIndices(self, _array1D)

    def getFaceIndex(self, _index):
        return _hilma.Mesh_getFaceIndex(self, _index)

    def addTriangles(self, _array1D, _n):
        return _hilma.Mesh_addTriangles(self, _array1D, _n)

    def getTriangles(self):
        return _hilma.Mesh_getTriangles(self)

    def getTrianglesIndices(self):
        return _hilma.Mesh_getTrianglesIndices(self)

    def haveFaceIndices(self):
        return _hilma.Mesh_haveFaceIndices(self)

    def getFaceIndicesTotal(self):
        return _hilma.Mesh_getFaceIndicesTotal(self)

    def getFaceIndices(self):
        return _hilma.Mesh_getFaceIndices(self)

    def clearFaceIndices(self):
        return _hilma.Mesh_clearFaceIndices(self)

    def invertWindingOrder(self, *args):
        return _hilma.Mesh_invertWindingOrder(self, *args)

    def addEdgeIndex(self, _i):
        return _hilma.Mesh_addEdgeIndex(self, _i)

    def addEdge(self, _line):
        return _hilma.Mesh_addEdge(self, _line)

    def addEdges(self, _array1D, _n):
        return _hilma.Mesh_addEdges(self, _array1D, _n)

    def addEdgeIndices(self, *args):
        return _hilma.Mesh_addEdgeIndices(self, *args)

    def haveEdgeIndices(self):
        return _hilma.Mesh_haveEdgeIndices(self)

    def getEdgeIndicesTotal(self):
        return _hilma.Mesh_getEdgeIndicesTotal(self)

    def clearEdgeIndices(self):
        return _hilma.Mesh_clearEdgeIndices(self)

    def getLinesEdges(self):
        return _hilma.Mesh_getLinesEdges(self)

    def getLinesIndices(self):
        return _hilma.Mesh_getLinesIndices(self)

    def setMaterial(self, _material):
        return _hilma.Mesh_setMaterial(self, _material)

    def addMaterial(self, _material, _index=-1):
        return _hilma.Mesh_addMaterial(self, _material, _index)

    def getMaterial(self, _name):
        return _hilma.Mesh_getMaterial(self, _name)

    def haveMaterials(self):
        return _hilma.Mesh_haveMaterials(self)

    def printMaterials(self):
        return _hilma.Mesh_printMaterials(self)

    def getMaterialsNames(self):
        return _hilma.Mesh_getMaterialsNames(self)

    def getMaterialForFaceIndex(self, _index):
        return _hilma.Mesh_getMaterialForFaceIndex(self, _index)

    def getMeshForIndices(self, _start, _end):
        return _hilma.Mesh_getMeshForIndices(self, _start, _end)

    def getMeshesByMaterials(self):
        return _hilma.Mesh_getMeshesByMaterials(self)

    def getFaceIndicesForMaterial(self, _name):
        return _hilma.Mesh_getFaceIndicesForMaterial(self, _name)

# Register Mesh in _hilma:
_hilma.Mesh_swigregister(Mesh)

CapType_BUTT = _hilma.CapType_BUTT
CapType_SQUARE = _hilma.CapType_SQUARE
CapType_ROUND = _hilma.CapType_ROUND
JoinType_MITER = _hilma.JoinType_MITER
JoinType_BEVEL = _hilma.JoinType_BEVEL
JoinType_ROUND = _hilma.JoinType_ROUND
class Polyline(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _hilma.Polyline_swiginit(self, _hilma.new_Polyline(*args))

    def clear(self):
        return _hilma.Polyline_clear(self)

    def addVertex(self, *args):
        return _hilma.Polyline_addVertex(self, *args)

    def addVertices(self, *args):
        return _hilma.Polyline_addVertices(self, *args)

    def insertVertex(self, *args):
        return _hilma.Polyline_insertVertex(self, *args)

    def append(self, _poly):
        return _hilma.Polyline_append(self, _poly)

    def removeVertex(self, index):
        return _hilma.Polyline_removeVertex(self, index)

    def resize(self, size):
        return _hilma.Polyline_resize(self, size)

    def size(self):
        return _hilma.Polyline_size(self)

    def getVertices(self, *args):
        return _hilma.Polyline_getVertices(self, *args)

    def begin(self, *args):
        return _hilma.Polyline_begin(self, *args)

    def rbegin(self, *args):
        return _hilma.Polyline_rbegin(self, *args)

    def end(self, *args):
        return _hilma.Polyline_end(self, *args)

    def rend(self, *args):
        return _hilma.Polyline_rend(self, *args)

    def lineTo(self, *args):
        return _hilma.Polyline_lineTo(self, *args)

    def arc(self, *args):
        return _hilma.Polyline_arc(self, *args)

    def arcNegative(self, *args):
        return _hilma.Polyline_arcNegative(self, *args)

    def curveTo(self, *args):
        return _hilma.Polyline_curveTo(self, *args)

    def bezierTo(self, *args):
        return _hilma.Polyline_bezierTo(self, *args)

    def quadBezierTo(self, *args):
        return _hilma.Polyline_quadBezierTo(self, *args)

    def getSmoothed(self, smoothingSize, smoothingShape=0):
        return _hilma.Polyline_getSmoothed(self, smoothingSize, smoothingShape)

    def getResampledBySpacing(self, spacing):
        return _hilma.Polyline_getResampledBySpacing(self, spacing)

    def getResampledByCount(self, count):
        return _hilma.Polyline_getResampledByCount(self, count)

    def simplify(self, tolerance=0.3):
        return _hilma.Polyline_simplify(self, tolerance)

    def rotateDeg(self, *args):
        return _hilma.Polyline_rotateDeg(self, *args)

    def rotateRad(self, *args):
        return _hilma.Polyline_rotateRad(self, *args)

    def translate(self, *args):
        return _hilma.Polyline_translate(self, *args)

    def scale(self, x, y):
        return _hilma.Polyline_scale(self, x, y)

    def close(self):
        return _hilma.Polyline_close(self)

    def setClosed(self, tf):
        return _hilma.Polyline_setClosed(self, tf)

    def isClosed(self):
        return _hilma.Polyline_isClosed(self)

    def hasChanged(self):
        return _hilma.Polyline_hasChanged(self)

    def flagHasChanged(self):
        return _hilma.Polyline_flagHasChanged(self)

    def inside(self, *args):
        return _hilma.Polyline_inside(self, *args)

    def getPerimeter(self):
        return _hilma.Polyline_getPerimeter(self)

    def getClosestPoint(self, target, nearestIndex=None):
        return _hilma.Polyline_getClosestPoint(self, target, nearestIndex)

    def getIndexAtLength(self, f):
        return _hilma.Polyline_getIndexAtLength(self, f)

    def getIndexAtPercent(self, f):
        return _hilma.Polyline_getIndexAtPercent(self, f)

    def getLengthAtIndex(self, index):
        return _hilma.Polyline_getLengthAtIndex(self, index)

    def getLengthAtIndexInterpolated(self, findex):
        return _hilma.Polyline_getLengthAtIndexInterpolated(self, findex)

    def getPointAtLength(self, f):
        return _hilma.Polyline_getPointAtLength(self, f)

    def getPointAtPercent(self, f):
        return _hilma.Polyline_getPointAtPercent(self, f)

    def getPointAtIndexInterpolated(self, findex):
        return _hilma.Polyline_getPointAtIndexInterpolated(self, findex)

    def getRotationAtIndex(self, index):
        return _hilma.Polyline_getRotationAtIndex(self, index)

    def getRotationAtIndexInterpolated(self, findex):
        return _hilma.Polyline_getRotationAtIndexInterpolated(self, findex)

    def getDegreesAtIndex(self, index):
        return _hilma.Polyline_getDegreesAtIndex(self, index)

    def getDegreesAtIndexInterpolated(self, findex):
        return _hilma.Polyline_getDegreesAtIndexInterpolated(self, findex)

    def getRadiansAtIndex(self, index):
        return _hilma.Polyline_getRadiansAtIndex(self, index)

    def getRadiansAtIndexInterpolated(self, findex):
        return _hilma.Polyline_getRadiansAtIndexInterpolated(self, findex)

    def getTangentAtIndex(self, index):
        return _hilma.Polyline_getTangentAtIndex(self, index)

    def getTangentAtIndexInterpolated(self, findex):
        return _hilma.Polyline_getTangentAtIndexInterpolated(self, findex)

    def getNormalAtIndex(self, index):
        return _hilma.Polyline_getNormalAtIndex(self, index)

    def getNormalAtIndexInterpolated(self, findex):
        return _hilma.Polyline_getNormalAtIndexInterpolated(self, findex)

    def getWrappedIndex(self, index):
        return _hilma.Polyline_getWrappedIndex(self, index)

    def setRightVector(self, *args):
        return _hilma.Polyline_setRightVector(self, *args)

    def getRightVector(self):
        return _hilma.Polyline_getRightVector(self)
    __swig_destroy__ = _hilma.delete_Polyline

# Register Polyline in _hilma:
_hilma.Polyline_swigregister(Polyline)

class Polygon(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _hilma.Polygon_swiginit(self, _hilma.new_Polygon(*args))

    def append(self, *args):
        return _hilma.Polygon_append(self, *args)

    def get(self, *args):
        return _hilma.Polygon_get(self, *args)

    def size(self):
        return _hilma.Polygon_size(self)
    __swig_destroy__ = _hilma.delete_Polygon

# Register Polygon in _hilma:
_hilma.Polygon_swigregister(Polygon)

class Camera(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _lookfrom, _lookat, _vup, _vfov, _aspect_ratio, _aperture, _focus_dist):
        _hilma.Camera_swiginit(self, _hilma.new_Camera(_lookfrom, _lookat, _vup, _vfov, _aspect_ratio, _aperture, _focus_dist))

    def getRay(self, s, t):
        return _hilma.Camera_getRay(self, s, t)
    __swig_destroy__ = _hilma.delete_Camera

# Register Camera in _hilma:
_hilma.Camera_swigregister(Camera)

class BoundingBox(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    min = property(_hilma.BoundingBox_min_get, _hilma.BoundingBox_min_set)
    max = property(_hilma.BoundingBox_max_get, _hilma.BoundingBox_max_set)

    def __init__(self):
        _hilma.BoundingBox_swiginit(self, _hilma.new_BoundingBox())

    def getWidth(self):
        return _hilma.BoundingBox_getWidth(self)

    def getHeight(self):
        return _hilma.BoundingBox_getHeight(self)

    def getDepth(self):
        return _hilma.BoundingBox_getDepth(self)

    def getCenter(self):
        return _hilma.BoundingBox_getCenter(self)

    def getDiagonal(self):
        return _hilma.BoundingBox_getDiagonal(self)

    def containsX(self, _x):
        return _hilma.BoundingBox_containsX(self, _x)

    def containsY(self, _y):
        return _hilma.BoundingBox_containsY(self, _y)

    def containsZ(self, _z):
        return _hilma.BoundingBox_containsZ(self, _z)

    def contains(self, *args):
        return _hilma.BoundingBox_contains(self, *args)

    def expand(self, *args):
        return _hilma.BoundingBox_expand(self, *args)
    __swig_destroy__ = _hilma.delete_BoundingBox

# Register BoundingBox in _hilma:
_hilma.BoundingBox_swigregister(BoundingBox)

class BoundingSphere(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _hilma.BoundingSphere_swiginit(self, _hilma.new_BoundingSphere(*args))

    def getCenter(self, *args):
        return _hilma.BoundingSphere_getCenter(self, *args)

    def getRadio(self, *args):
        return _hilma.BoundingSphere_getRadio(self, *args)

    def overlaps(self, _other):
        return _hilma.BoundingSphere_overlaps(self, _other)

    def contains(self, *args):
        return _hilma.BoundingSphere_contains(self, *args)
    __swig_destroy__ = _hilma.delete_BoundingSphere

# Register BoundingSphere in _hilma:
_hilma.BoundingSphere_swigregister(BoundingSphere)

class BVH(BoundingBox):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _hilma.BVH_swiginit(self, _hilma.new_BVH(*args))

    def load(self, _elements, _splitAxis=-1):
        return _hilma.BVH_load(self, _elements, _splitAxis)

    def hit(self, _ray, _minDistance, _maxDistance):
        return _hilma.BVH_hit(self, _ray, _minDistance, _maxDistance)

    def closest(self, _point):
        return _hilma.BVH_closest(self, _point)

    def split(self, _axis=-1):
        return _hilma.BVH_split(self, _axis)

    def clear(self):
        return _hilma.BVH_clear(self)

    def getTotal(self):
        return _hilma.BVH_getTotal(self)
    elements = property(_hilma.BVH_elements_get, _hilma.BVH_elements_set)
    parent = property(_hilma.BVH_parent_get, _hilma.BVH_parent_set)
    left = property(_hilma.BVH_left_get, _hilma.BVH_left_set)
    right = property(_hilma.BVH_right_get, _hilma.BVH_right_set)
    leaf = property(_hilma.BVH_leaf_get, _hilma.BVH_leaf_set)
    __swig_destroy__ = _hilma.delete_BVH

# Register BVH in _hilma:
_hilma.BVH_swigregister(BVH)


def inside(_points, _v):
    return _hilma.inside(_points, _v)
class IntersectionData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    position = property(_hilma.IntersectionData_position_get, _hilma.IntersectionData_position_set)
    direction = property(_hilma.IntersectionData_direction_get, _hilma.IntersectionData_direction_set)
    distance = property(_hilma.IntersectionData_distance_get, _hilma.IntersectionData_distance_set)
    hit = property(_hilma.IntersectionData_hit_get, _hilma.IntersectionData_hit_set)

    def __init__(self):
        _hilma.IntersectionData_swiginit(self, _hilma.new_IntersectionData())
    __swig_destroy__ = _hilma.delete_IntersectionData

# Register IntersectionData in _hilma:
_hilma.IntersectionData_swigregister(IntersectionData)


def distance(*args):
    return _hilma.distance(*args)

def intersection(*args):
    return _hilma.intersection(*args)

def getTotalRayBoundingBoxTests():
    return _hilma.getTotalRayBoundingBoxTests()

def getTotalRayTriangleTests():
    return _hilma.getTotalRayTriangleTests()

def getTotalRayTrianglesIntersections():
    return _hilma.getTotalRayTrianglesIntersections()

def getTotalLineLineTests():
    return _hilma.getTotalLineLineTests()

def getTotalLineLineIntersections():
    return _hilma.getTotalLineLineIntersections()

def sqrt(_image):
    return _hilma.sqrt(_image)

def invert(_image):
    return _hilma.invert(_image)

def gamma(_image, _gamma):
    return _hilma.gamma(_image, _gamma)

def flip(_image):
    return _hilma.flip(_image)

def remap(_image, _in_min, _int_max, _out_min, _out_max, _clamp):
    return _hilma.remap(_image, _in_min, _int_max, _out_min, _out_max, _clamp)

def autolevel(_image):
    return _hilma.autolevel(_image)

def threshold(_image, _threshold=0.5):
    return _hilma.threshold(_image, _threshold)

def to8bit(_image):
    return _hilma.to8bit(_image)

def toNormalmap(_heightmap, _zScale=100.0):
    return _hilma.toNormalmap(_heightmap, _zScale)

def toLuma(_image):
    return _hilma.toLuma(_image)

def toHeightmap(_terrariumImage):
    return _hilma.toHeightmap(_terrariumImage)

def toHueRainbow(_graysale):
    return _hilma.toHueRainbow(_graysale)

def toTerrain(_image, _zScale, _maxError=0.001, _baseHeight=0.0, _maxTriangles=0, _maxPoints=0):
    return _hilma.toTerrain(_image, _zScale, _maxError, _baseHeight, _maxTriangles, _maxPoints)

def toSdf(*args):
    return _hilma.toSdf(*args)

def mergeChannels(*args):
    return _hilma.mergeChannels(*args)

def addAlpha(_rgb, _alpha):
    return _hilma.addAlpha(_rgb, _alpha)

def packInSprite(_images):
    return _hilma.packInSprite(_images)

def splitChannels(_image):
    return _hilma.splitChannels(_image)

def denoise(_color, _normal, _albedo, _hdr=True):
    return _hilma.denoise(_color, _normal, _albedo, _hdr)

def toSurface(*args):
    return _hilma.toSurface(*args)

def toWall(*args):
    return _hilma.toWall(*args)

def toSpline(*args):
    return _hilma.toSpline(*args)

def toTube(*args):
    return _hilma.toTube(*args)

def toLines(*args):
    return _hilma.toLines(*args)

def simplify(_points, _tolerance=0.3):
    return _hilma.simplify(_points, _tolerance)

def getSimplify(_points, _tolerance=0.3):
    return _hilma.getSimplify(_points, _tolerance)

def getConvexHull(_points):
    return _hilma.getConvexHull(_points)

def getArea(_points):
    return _hilma.getArea(_points)

def getBoundingBox(*args):
    return _hilma.getBoundingBox(*args)

def getCentroid(*args):
    return _hilma.getCentroid(*args)

def getMax(_array2D):
    return _hilma.getMax(_array2D)

def getMin(_array2D):
    return _hilma.getMin(_array2D)

def getRange(_image):
    return _hilma.getRange(_image)

def textureAtlas(_mesh):
    return _hilma.textureAtlas(_mesh)

def plane(*args):
    return _hilma.plane(*args)

def box(_width, _height, _depth, _resX, _resY, _resZ):
    return _hilma.box(_width, _height, _depth, _resX, _resY, _resZ)

def cube(_size, _resolution):
    return _hilma.cube(_size, _resolution)

def sphere(*args):
    return _hilma.sphere(*args)

def icosphere(_radius, _iterations):
    return _hilma.icosphere(_radius, _iterations)

def cylinder(*args):
    return _hilma.cylinder(*args)

def cone(*args):
    return _hilma.cone(*args)
class HitRecord(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    position = property(_hilma.HitRecord_position_get, _hilma.HitRecord_position_set)
    barycentric = property(_hilma.HitRecord_barycentric_get, _hilma.HitRecord_barycentric_set)
    normal = property(_hilma.HitRecord_normal_get, _hilma.HitRecord_normal_set)
    distance = property(_hilma.HitRecord_distance_get, _hilma.HitRecord_distance_set)
    triangle = property(_hilma.HitRecord_triangle_get, _hilma.HitRecord_triangle_set)
    line = property(_hilma.HitRecord_line_get, _hilma.HitRecord_line_set)
    frontFace = property(_hilma.HitRecord_frontFace_get, _hilma.HitRecord_frontFace_set)

    def __init__(self):
        _hilma.HitRecord_swiginit(self, _hilma.new_HitRecord())
    __swig_destroy__ = _hilma.delete_HitRecord

# Register HitRecord in _hilma:
_hilma.HitRecord_swigregister(HitRecord)

class Hittable(BoundingBox):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _hilma.Hittable_swiginit(self, _hilma.new_Hittable(*args))

    def hit(self, _ray, _minDistance, _maxDistance, _rec):
        return _hilma.Hittable_hit(self, _ray, _minDistance, _maxDistance, _rec)

    def getTotalTriangles(self):
        return _hilma.Hittable_getTotalTriangles(self)

    def getTotalLines(self):
        return _hilma.Hittable_getTotalLines(self)

    def getMesh(self):
        return _hilma.Hittable_getMesh(self)
    __swig_destroy__ = _hilma.delete_Hittable

# Register Hittable in _hilma:
_hilma.Hittable_swigregister(Hittable)


def hit(*args):
    return _hilma.hit(*args)

def default_rayColor(_ray, _hittables, _depth):
    return _hilma.default_rayColor(_ray, _hittables, _depth)

def albedo_rayColor(_ray, _hittables, _depth):
    return _hilma.albedo_rayColor(_ray, _hittables, _depth)

def normal_rayColor(_ray, _hittables, _depth):
    return _hilma.normal_rayColor(_ray, _hittables, _depth)

def raytrace(*args):
    return _hilma.raytrace(*args)

def raytrace_multithread(*args):
    return _hilma.raytrace_multithread(*args)

def transform(*args):
    return _hilma.transform(*args)

def scaleX(*args):
    return _hilma.scaleX(*args)

def scaleY(*args):
    return _hilma.scaleY(*args)

def scaleZ(*args):
    return _hilma.scaleZ(*args)

def scale(*args):
    return _hilma.scale(*args)

def translateX(*args):
    return _hilma.translateX(*args)

def translate(*args):
    return _hilma.translate(*args)

def translateY(*args):
    return _hilma.translateY(*args)

def translateZ(*args):
    return _hilma.translateZ(*args)

def rotateX(*args):
    return _hilma.rotateX(*args)

def rotateY(*args):
    return _hilma.rotateY(*args)

def rotateZ(*args):
    return _hilma.rotateZ(*args)

def rotate(*args):
    return _hilma.rotate(*args)

def center(*args):
    return _hilma.center(*args)

def loadJpg(*args):
    return _hilma.loadJpg(*args)

def saveJpg(*args):
    return _hilma.saveJpg(*args)

def loadPng(*args):
    return _hilma.loadPng(*args)

def savePng(*args):
    return _hilma.savePng(*args)

def loadHdr(*args):
    return _hilma.loadHdr(*args)

def saveHdr(*args):
    return _hilma.saveHdr(*args)

def loadPly(*args):
    return _hilma.loadPly(*args)

def savePly(_filename, _mesh, _binnary, _colorAsChar=False):
    return _hilma.savePly(_filename, _mesh, _binnary, _colorAsChar)

def loadStl(*args):
    return _hilma.loadStl(*args)

def saveStl(_filename, _mesh, _binnary):
    return _hilma.saveStl(_filename, _mesh, _binnary)

def loadObj(*args):
    return _hilma.loadObj(*args)

def saveObj(_filename, _mesh):
    return _hilma.saveObj(_filename, _mesh)

def loadGltf(*args):
    return _hilma.loadGltf(*args)

def saveGltf(_filename, _mesh):
    return _hilma.saveGltf(_filename, _mesh)

def load(*args):
    return _hilma.load(*args)

def save(_filename, _image):
    return _hilma.save(_filename, _image)


